name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.1.2)'
        required: true
        type: string
      build_number:
        description: 'Build number (optional)'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.29.0'
  PUB_CACHE: ~/.pub-cache

permissions:
  contents: write

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      
      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      # Accept Android SDK licenses
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses
      
      # Configure Gradle
      - name: Configure Gradle
        run: |
          echo "org.gradle.java.home=$(which java | xargs readlink -f | sed 's/\/bin\/java//')" >> android/gradle.properties
      
      # Set JAVA_HOME for Gradle
      - name: Set JAVA_HOME
        run: |
          echo "JAVA_HOME=$JAVA_HOME_17_X64" >> $GITHUB_ENV
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: "flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}"
          cache-path: "${{ runner.tool_cache }}/flutter"
      
      # Cache pub dependencies
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
            build
          key: "pub-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}"
          restore-keys: |
            pub-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          flutter clean
          flutter pub get
          flutter pub cache repair
        
      - name: Create firebase_options.dart
        run: |
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
        
      - name: Create app_config.dart
        run: |
          cat > lib/config/app_config.dart << 'EOL'
          class AppConfig {
            static const String googleMapsApiKey = '${{ secrets.PROD_MAPS_API_KEY }}';
          }
          EOL

      - name: Create strings.xml with Maps API Key
        run: |
          mkdir -p android/app/src/main/res/values
          cat > android/app/src/main/res/values/strings.xml << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="maps_api_key">${{ secrets.PROD_MAPS_API_KEY }}</string>
          </resources>
          EOL

      - name: Setup Firebase Configuration
        run: |
          echo "${{ secrets.PROD_FIREBASE_CONFIG }}" | base64 --decode > android/app/google-services-prod.json
          cp android/app/google-services-prod.json android/app/google-services.json
      
      # Setup Keystore
      - name: Setup Keystore
        run: |
          # Create the keystore directory
          mkdir -p android/app
          
          # Decode and save the release keystore
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > android/app/release.jks
          
          # Create key.properties with release signing config
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=release.jks
          EOF
          
          # Verify the files exist
          if [ ! -f "android/app/release.jks" ]; then
            echo "Error: Release keystore file not created"
            exit 1
          fi
          if [ ! -f "android/key.properties" ]; then
            echo "Error: key.properties file not created"
            exit 1
          fi
          
      # Print Release SHA-1
      - name: Print Release SHA-1
        run: |
          echo "Release SHA-1 Fingerprint:"
          echo "===================="
          keytool -list -v -keystore android/app/release.jks -alias ${{ secrets.KEY_ALIAS }} -storepass ${{ secrets.KEYSTORE_PASSWORD }} | grep "SHA1:"
          echo "===================="
          echo "Add this SHA-1 to your Google Maps API key configuration in the Google Cloud Console"
      
      # Create debug keystore
      - name: Create debug keystore
        run: |
          mkdir -p ~/.android
          keytool -genkeypair \
            -keystore ~/.android/debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -v
            
      # Print Debug SHA-1
      - name: Print Debug SHA-1
        run: |
          echo "Debug SHA-1 Fingerprint:"
          echo "===================="
          keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android | grep "SHA1:"
          echo "===================="
          echo "Add this SHA-1 to your Google Maps API key configuration in the Google Cloud Console"
      
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos
        
      # Update Kotlin version to fix compatibility issues
      - name: Update Kotlin version
        run: |
          sed -i 's/ext.kotlin_version = ".*"/ext.kotlin_version = "1.9.23"/' android/build.gradle
        
      - name: Build Release APK
        run: |
          # Validate version numbers
          PUBSPEC_VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2)
          if [ "$PUBSPEC_VERSION" != "${{ inputs.version }}" ]; then
            echo "Error: Version mismatch! pubspec.yaml has version $PUBSPEC_VERSION but workflow input is ${{ inputs.version }}"
            exit 1
          fi
          flutter build apk --release --build-name=${{ inputs.version }} --build-number=${{ github.run_number }}
      
      # Rename APK file
      - name: Rename Release APK
        run: |
          cd build/app/outputs/flutter-apk
          mv app-release.apk "coffee_mapper_${{ inputs.version }}.apk"
      
      - name: Upload Release APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/coffee_mapper_${{ inputs.version }}.apk
          retention-days: 30
          
      # Get current date in IST
      - name: Get current date
        id: date
        run: |
          echo "RELEASE_DATE=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV
          
      # Create/Update Debug Release and Tags
      - name: Update debug tags
        run: |
          # Configure Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create/Update latest-release tag
          git tag -a latest-release -m "Latest Release Build" -f
          git push origin latest-release --force
        
      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest-release
          name: "Latest Release v${{ inputs.version }}"
          files: build/app/outputs/flutter-apk/coffee_mapper_${{ inputs.version }}.apk
          body: |
            Coffee Mapper Android Release v${{ inputs.version }}
            
            This is the latest release build of Coffee Mapper Android.
            
            **Version:** v${{ inputs.version }}
            **Build Number:** ${{ github.run_number }}
            **Release Date:** ${{ env.RELEASE_DATE }}
            
            Please download the APK and test thoroughly before distribution. 