name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.1.2)'
        required: true
        type: string
      build_number:
        description: 'Build number (optional)'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.29.0'

permissions:
  contents: write

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      
      - name: Configure Gradle for CI
        run: |
          # Create CI-specific gradle.properties
          cat > android/gradle.properties << 'EOL'
          org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=2G -XX:+HeapDumpOnOutOfMemoryError
          android.useAndroidX=true
          android.enableJetifier=true
          android.suppressUnsupportedCompileSdk=35
          org.gradle.java.version=17
          EOL
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: flutter-linux-${{ env.FLUTTER_VERSION }}
          cache-path: ${{ runner.tool_cache }}/flutter
          pub-cache-key: flutter-pub-linux-${{ env.FLUTTER_VERSION }}
          pub-cache-path: ${{ env.PUB_CACHE }}
      
      - name: Install dependencies
        run: flutter pub get
        
      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ inputs.version }}/" pubspec.yaml
          cat pubspec.yaml | grep "^version:"
        
      - name: Create firebase_options.dart
        run: |
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
        
      - name: Create app_config.dart
        run: |
          cat > lib/config/app_config.dart << 'EOL'
          class AppConfig {
            static const String googleMapsApiKey = '${{ secrets.PROD_MAPS_API_KEY }}';
          }
          EOL

      - name: Create strings.xml with Maps API Key
        run: |
          mkdir -p android/app/src/main/res/values
          cat > android/app/src/main/res/values/strings.xml << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="maps_api_key">${{ secrets.PROD_MAPS_API_KEY }}</string>
          </resources>
          EOL

      - name: Setup Firebase Configuration
        run: |
          echo "${{ secrets.PROD_FIREBASE_CONFIG }}" | base64 --decode > android/app/google-services-prod.json
          cp android/app/google-services-prod.json android/app/google-services.json
      
      - name: Setup Keystore
        run: |
          # Create debug keystore
          mkdir -p ~/.android
          keytool -genkeypair \
            -keystore ~/.android/debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -v
          
          # Create the keystore directory and setup release keystore
          mkdir -p android/app
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > android/app/release.jks
          
          # Create key.properties with release signing config
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=release.jks
          EOF
          
          # Verify the files exist
          if [ ! -f "android/app/release.jks" ]; then
            echo "Error: Release keystore file not created"
            exit 1
          fi
          if [ ! -f "android/key.properties" ]; then
            echo "Error: key.properties file not created"
            exit 1
          fi
          
      - name: Print Keystore Fingerprints
        run: |
          echo "Debug Keystore SHA-1:"
          keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android | grep "SHA1:"
          echo "Debug Keystore SHA-256:"
          keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android | grep "SHA256:"
          
          echo "\nRelease Keystore SHA-1:"
          keytool -list -v -keystore android/app/release.jks -alias ${{ secrets.KEY_ALIAS }} -storepass ${{ secrets.KEYSTORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} | grep "SHA1:"
          echo "Release Keystore SHA-256:"
          keytool -list -v -keystore android/app/release.jks -alias ${{ secrets.KEY_ALIAS }} -storepass ${{ secrets.KEYSTORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} | grep "SHA256:"
          
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos
        
      - name: Update Kotlin version
        run: |
          sed -i 's/ext.kotlin_version = ".*"/ext.kotlin_version = "1.9.23"/' android/build.gradle
        
      - name: Build Release APK
        run: |
          # Verify version update in pubspec.yaml
          CURRENT_VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2)
          if [ "$CURRENT_VERSION" != "${{ inputs.version }}" ]; then
            echo "Error: Version mismatch. pubspec.yaml has $CURRENT_VERSION but workflow input is ${{ inputs.version }}"
            exit 1
          fi
          flutter build apk --release --build-name=${{ inputs.version }} --build-number=${{ github.run_number }}
          
      - name: Rename Release APK
        run: |
          cd build/app/outputs/flutter-apk
          mv app-release.apk "coffee_mapper_${{ inputs.version }}.apk"
          ls -la  # List directory contents to verify rename
          if [ ! -f "coffee_mapper_${{ inputs.version }}.apk" ]; then
            echo "Error: APK file not found after rename"
            exit 1
          fi
      
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/coffee_mapper_${{ inputs.version }}.apk
          retention-days: 30
          
      - name: Get current date
        id: date
        run: echo "RELEASE_DATE=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV
          
      - name: Update release tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a latest-release -m "Latest Release Build" -f
          git push origin latest-release --force
        
      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest-release
          name: "Latest Release v${{ inputs.version }}"
          files: build/app/outputs/flutter-apk/coffee_mapper_${{ inputs.version }}.apk
          body: |
            Coffee Mapper Android Release v${{ inputs.version }}
            
            This is the latest release build of Coffee Mapper Android.
            
            **Version:** v${{ inputs.version }}
            **Build Number:** ${{ github.run_number }}
            **Release Date:** ${{ env.RELEASE_DATE }}
            
            Please download the APK and test thoroughly before distribution. 