name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.1.2)'
        required: true
        type: string
      build_number:
        description: 'Build number'
        required: true
        type: string

env:
  FLUTTER_VERSION: '3.29.0'
  PUB_CACHE: ~/.pub-cache

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      # Clean up existing tags
      - name: Clean up old tags
        run: |
          # Configure Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Login to GitHub CLI
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
          # Delete old release tags
          for tag in $(git tag -l "v1.*"); do
            git tag -d $tag
            git push origin :refs/tags/$tag || true
          done
          
          # Delete latest-release tag if it exists
          git tag -d latest-release || true
          git push origin :refs/tags/latest-release || true
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      
      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      # Accept Android SDK licenses
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses
      
      # Configure Gradle
      - name: Configure Gradle
        run: |
          echo "org.gradle.java.home=$(which java | xargs readlink -f | sed 's/\/bin\/java//')" >> android/gradle.properties
      
      # Set JAVA_HOME for Gradle
      - name: Set JAVA_HOME
        run: |
          echo "JAVA_HOME=$JAVA_HOME_17_X64" >> $GITHUB_ENV
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
        
      - name: Create firebase_options.dart
        run: |
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
        
      - name: Create app_config.dart
        run: |
          cat > lib/config/app_config.dart << 'EOL'
          class AppConfig {
            static const String googleMapsApiKey = '${{ secrets.PROD_MAPS_API_KEY }}';
          }
          EOL

      - name: Create strings.xml with Maps API Key
        run: |
          mkdir -p android/app/src/main/res/values
          cat > android/app/src/main/res/values/strings.xml << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="maps_api_key">${{ secrets.PROD_MAPS_API_KEY }}</string>
          </resources>
          EOL

      - name: Setup Firebase Configuration
        run: |
          echo "${{ secrets.PROD_FIREBASE_CONFIG }}" | base64 --decode > android/app/google-services-prod.json
          cp android/app/google-services-prod.json android/app/google-services.json
      
      # Setup Keystore
      - name: Setup Keystore
        run: |
          # Create the keystore directory
          mkdir -p android/app
          
          # Decode and save the release keystore
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > android/app/release.jks
          
          # Create key.properties with release signing config
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=release.jks
          EOF
          
          # Verify the files exist
          if [ ! -f "android/app/release.jks" ]; then
            echo "Error: Release keystore file not created"
            exit 1
          fi
          if [ ! -f "android/key.properties" ]; then
            echo "Error: key.properties file not created"
            exit 1
          fi
      
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos
        
      # Update Kotlin version to fix compatibility issues
      - name: Update Kotlin version
        run: |
          sed -i 's/ext.kotlin_version = ".*"/ext.kotlin_version = "1.9.23"/' android/build.gradle
        
      # Create debug keystore
      - name: Create debug keystore
        run: |
          mkdir -p ~/.android
          keytool -genkeypair \
            -keystore ~/.android/debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -v
        
      - name: Build Release APK
        run: flutter build apk --release --build-name=${{ inputs.version }} --build-number=${{ inputs.build_number }}
      
      - name: Upload Release APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30
          
      # Create and update tags
      - name: Create and update tags
        run: |
          # Configure Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create version tag
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
          git push origin "v${{ inputs.version }}" --force
          
          # Create/Update latest-release tag
          git tag -a latest-release -m "Latest Release v${{ inputs.version }}"
          git push origin latest-release --force
          
      # Upload to Release
      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-release
          name: "Latest Release v${{ inputs.version }}"
          files: build/app/outputs/flutter-apk/app-release.apk
          body: |
            Coffee Mapper Android Release v${{ inputs.version }}
            
            This is the latest release build of Coffee Mapper Android.
            
            **Version:** v${{ inputs.version }}
            **Build Number:** ${{ inputs.build_number }}
            **Release Date:** $(date '+%Y-%m-%d %H:%M:%S')
            
            Please download the APK and test thoroughly before distribution. 