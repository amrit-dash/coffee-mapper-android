buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // Add the dependency for the Google services Gradle plugin
        classpath 'com.google.gms:google-services:4.4.1'
        classpath 'com.android.tools.build:gradle:8.2.2'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.9'
    }
}

plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    // The Flutter Gradle Plugin must be applied after the Android Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.coffee.mapper"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.coffee.mapper"
        minSdkVersion 24
        targetSdkVersion 34
        // Let Flutter handle version code and name
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file(System.getProperty("user.home") + "/.android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        if (keystorePropertiesFile.exists()) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".dev"
            signingConfig signingConfigs.debug
        }
    }

    // This is for environment-specific google-services.json
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def googleServicesFile
        def taskName = "copy${variantName.capitalize()}GoogleServices"
        
        if (variantName.contains("debug")) {
            googleServicesFile = file('google-services-dev.json')
            println "Debug build: Using ${googleServicesFile.absolutePath}"
        } else {
            googleServicesFile = file('google-services-prod.json')
            println "Release build: Using ${googleServicesFile.absolutePath}"
        }
        
        tasks.register(taskName) {
            it.doFirst {
                if (googleServicesFile.exists()) {
                    println "File exists: ${googleServicesFile.absolutePath}"
                    copy {
                        from googleServicesFile
                        into projectDir
                        rename { String fileName ->
                            "google-services.json"
                        }
                    }
                    println "Copied to: ${file('google-services.json').absolutePath}"
                } else {
                    throw new RuntimeException("Required configuration file ${googleServicesFile.absolutePath} does not exist")
                }
            }
        }
        
        tasks.matching { it.name == "process${variantName.capitalize()}GoogleServices" }.configureEach {
            it.dependsOn(taskName)
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.7.2')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0"
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
